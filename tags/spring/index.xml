<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Spring on 梧桐碎梦</title>
    <link>https://wutongsuimeng.github.io/tags/spring/</link>
    <description>Recent content in Spring on 梧桐碎梦</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 14 Aug 2022 16:08:23 +0800</lastBuildDate><atom:link href="https://wutongsuimeng.github.io/tags/spring/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>bean的创建过程分析</title>
      <link>https://wutongsuimeng.github.io/post/bean%E7%9A%84%E5%88%9B%E5%BB%BA%E8%BF%87%E7%A8%8B%E5%88%86%E6%9E%90/</link>
      <pubDate>Sun, 14 Aug 2022 16:08:23 +0800</pubDate>
      
      <guid>https://wutongsuimeng.github.io/post/bean%E7%9A%84%E5%88%9B%E5%BB%BA%E8%BF%87%E7%A8%8B%E5%88%86%E6%9E%90/</guid>
      <description>&lt;p&gt;既然是源码分析，那最好的办法还是编写一个测试用例，然后 debug 来看程序是怎样运行的。
测试例子：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; args&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;  
    ApplicationContext context&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; AnnotationConfigApplicationContext&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;TestConfiguration&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;  
    TestBean tb&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;TestBean&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; context&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getBean&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;testBean&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;  
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@Configuration&lt;/span&gt;  
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TestConfiguration&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;  
    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Bean&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;testBean&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;  
    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Scope&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;prototype&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;  
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; TestBean &lt;span style=&#34;color:#a6e22e&#34;&gt;testBean&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(){&lt;/span&gt;  
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; TestBean&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;  
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;  
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>后端接收表单方式上传的文件和数据</title>
      <link>https://wutongsuimeng.github.io/post/%E5%90%8E%E7%AB%AF%E6%8E%A5%E6%94%B6%E8%A1%A8%E5%8D%95%E6%96%B9%E5%BC%8F%E4%B8%8A%E4%BC%A0%E7%9A%84%E6%96%87%E4%BB%B6%E5%92%8C%E6%95%B0%E6%8D%AE/</link>
      <pubDate>Thu, 14 Apr 2022 22:38:44 +0800</pubDate>
      
      <guid>https://wutongsuimeng.github.io/post/%E5%90%8E%E7%AB%AF%E6%8E%A5%E6%94%B6%E8%A1%A8%E5%8D%95%E6%96%B9%E5%BC%8F%E4%B8%8A%E4%BC%A0%E7%9A%84%E6%96%87%E4%BB%B6%E5%92%8C%E6%95%B0%E6%8D%AE/</guid>
      <description>&lt;p&gt;通过 Postman 上传多个文件和数据，后端接收文件和数据。&lt;/p&gt;
&lt;h2 id=&#34;后端&#34;&gt;后端&lt;/h2&gt;
&lt;p&gt;因为 Postman 是通过表单方式上传，所以需要通过 &lt;code&gt;@RequestParam&lt;/code&gt; 注解接收文件，&lt;code&gt;value&lt;/code&gt; 属性定义请求参数，&lt;code&gt;required&lt;/code&gt; 定义该参数是否必须，默认为 &lt;code&gt;true&lt;/code&gt;。
上传文件需要使用 &lt;code&gt;MultipartFile&lt;/code&gt; 对象来接收，因为允许上传多个文件，所以使用了数组的形式。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>集成nacos和feign时报错java.lang.ClassNotFoundException: org.springframework.cloud.client.loadbalancer.LoadBalancerClientsProperties</title>
      <link>https://wutongsuimeng.github.io/post/%E9%9B%86%E6%88%90nacos%E5%92%8Cfeign%E6%97%B6%E6%8A%A5%E9%94%99java.lang.classnotfoundexception-org.springframework.cloud.client.loadbalancer.loadbalancerclientsproperties/</link>
      <pubDate>Wed, 16 Feb 2022 11:35:36 +0800</pubDate>
      
      <guid>https://wutongsuimeng.github.io/post/%E9%9B%86%E6%88%90nacos%E5%92%8Cfeign%E6%97%B6%E6%8A%A5%E9%94%99java.lang.classnotfoundexception-org.springframework.cloud.client.loadbalancer.loadbalancerclientsproperties/</guid>
      <description>&lt;p&gt;今天在尝试集成nacos和feign时，报错：
&lt;code&gt;java.lang.ClassNotFoundException: org.springframework.cloud.client.loadbalancer.LoadBalancerClientsProperties&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;通过idea的Add Maven dependency功能，发现这个类位于 &lt;code&gt;spring-cloud-commons&lt;/code&gt;包内。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://wutongsuimeng.github.io/media/Pasted%20image%2020220216113850.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;但是通过解压所引入的&lt;code&gt;spring-cloud-commons&lt;/code&gt;的jar包，发现是存在该类的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://wutongsuimeng.github.io/media/Pasted%20image%2020220216115557.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;所以猜测可能是版本问题。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
